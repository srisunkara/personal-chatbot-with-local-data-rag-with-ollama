from __future__ import annotations

from datetime import datetime
from typing import Optional

from pydantic import BaseModel, Field


# Pydantic models based on source_code/config/table_definitions.sql
# Schema: personal_chat


class ChatGroupDtl(BaseModel):
    id: int = Field(..., description="Primary key")
    user_id: int
    group_name: Optional[str] = None
    group_desc: Optional[str] = None
    is_active: bool = True
    created_ts: Optional[datetime] = None  # default generated by DB


class ChatGroupDtlCreate(BaseModel):
    id: int
    user_id: int
    group_name: Optional[str] = None
    group_desc: Optional[str] = None
    is_active: bool = True


class ChatGroupDtlUpdate(BaseModel):
    user_id: Optional[int] = None
    group_name: Optional[str] = None
    group_desc: Optional[str] = None
    is_active: Optional[bool] = None


class ChatHistory(BaseModel):
    id: int  # bigint in DB, int in Python is unbounded
    user_id: int = 1
    user_inquiry: str
    assistant_response: str
    reference_id: Optional[int] = None  # bigint
    chat_group_id: Optional[int] = None
    created_ts: datetime


class ChatHistoryCreate(BaseModel):
    id: int
    user_id: int = 1
    user_inquiry: str
    assistant_response: str
    reference_id: Optional[int] = None
    chat_group_id: Optional[int] = None


class ChatHistoryUpdate(BaseModel):
    user_id: Optional[int] = None
    user_inquiry: Optional[str] = None
    assistant_response: Optional[str] = None
    reference_id: Optional[int] = None
    chat_group_id: Optional[int] = None
